syntax = "proto3";

package user;

option go_package = "github.com/Yux77Yux/platform_backend/generated/user;";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

import "user/methods/post.proto";
import "user/methods/get.proto";
import "user/methods/update.proto";

service UserService {
  // POST
  rpc AddReviewer(user.methods.AddReviewerRequest) returns (user.methods.AddReviewerResponse) {
    option (google.api.http) = {
      post: "/api/reviewer"
      body: "user_credentials"
    };
  }

  rpc Follow(user.methods.FollowRequest) returns (user.methods.FollowResponse) {
    option (google.api.http) = {
      post: "/api/user/follow"
      body: "*"
    };
  }

  rpc Register(user.methods.RegisterRequest) returns (user.methods.RegisterResponse) {
    option (google.api.http) = {
      post: "/api/user/register"
      body: "user_credentials"
    };
  }

  // DEL
  rpc CancelFollow(user.methods.FollowRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      patch: "/api/user/follow"
      body: "*"
    };
  }

  // GET
  rpc ExistFollowee(user.methods.ExistFolloweeRequest) returns (user.methods.ExistFolloweeResponse) {
    option (google.api.http) = {
      get: "/api/user/follow/get/{follow.followee_id}/{follow.follower_id}"
    };
  }

  rpc Login(user.methods.LoginRequest) returns (user.methods.LoginResponse);

  rpc GetFolloweesByTime(user.methods.GetFollowRequest) returns (user.methods.GetFollowResponse) {
    option (google.api.http) = {
      get: "/api/user/followee/time/{user_id}/{page}"
    };
  }

  rpc GetFolloweesByViews(user.methods.GetFollowRequest) returns (user.methods.GetFollowResponse) {
    option (google.api.http) = {
      get: "/api/user/followee/views/{user_id}/{page}"
    };
  }

  rpc GetFollowers(user.methods.GetFollowRequest) returns (user.methods.GetFollowResponse) {
    option (google.api.http) = {
      get: "/api/user/follower/{user_id}/{page}"
    };
  }

  rpc GetUser(user.methods.GetUserRequest) returns (user.methods.GetUserResponse) {
    option (google.api.http) = {
      get: "/api/user/{user_id}"
    };
  }
  rpc GetUsers(user.methods.GetUsersRequest) returns (user.methods.GetUsersResponse);

  // UPDATE
  // 批量字段
  rpc UpdateUserSpace(user.methods.UpdateUserSpaceRequest) returns (user.methods.UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/api/user/space"
      body: "*"
    };
  }

  // User Avatar
  rpc UpdateUserAvatar(user.methods.UpdateUserAvatarRequest) returns (user.methods.UpdateUserAvatarResponse) {
    option (google.api.http) = {
      patch: "/api/user/avatar"
      body: "*"
    };
  }

  // User Status
  rpc UpdateUserStatus(user.methods.UpdateUserStatusRequest) returns (user.methods.UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/api/user/status"
      body: "*"
    };
  }

  // User Bio
  rpc UpdateUserBio(user.methods.UpdateUserBioRequest) returns (user.methods.UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/api/user/bio"
      body: "*"
    };
  }

  rpc DelReviewer(user.methods.DelReviewerRequest) returns (user.methods.DelReviewerResponse) {
    option (google.api.http) = {
      patch: "/api/reviewer/auth"
      body: "*"
    };
  }
}